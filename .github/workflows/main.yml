name: SonarQube-Scan and Build JAR

on:
  # Trigger analysis when pushing to the main branch.
  push:
    branches:
      - main

jobs:
  sonarqube:
    name: SonarQube Trigger
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: main

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: 17
        distribution: 'adopt'
        architecture: x64

    - name: Delete SonarQube cache
      run: |
        if [ -d $HOME/.sonar ]; then
          rm -rf $HOME/.sonar
        fi

    - name: SonarQube Scan
      run: |
        # Download and unzip SonarScanner 5
        curl -sSL "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.0.2966-linux.zip" -o sonar-scanner.zip
        unzip sonar-scanner.zip -d .
        # Configure SonarScanner properties (adjust as needed)
        echo "sonar.host.url=${{ secrets.SONAR_HOST_URL }}" >> sonar-scanner-5.0.0.2966-linux/conf/sonar-scanner.properties
        echo "sonar.login=${{ secrets.SONAR_TOKEN }}" >> sonar-scanner-5.0.0.2966-linux/conf/sonar-scanner.properties
        echo "sonar.projectKey=test" >> sonar-scanner-5.0.0.2966-linux/conf/sonar-scanner.properties

        # Run SonarScanner and handle errors
        if ./sonar-scanner-5.0.0.2966-linux/bin/sonar-scanner; then
          echo "SonarQube analysis completed successfully."
        else
          echo "SonarQube analysis failed."
          exit 1
        fi

    - name: Change to repository root
      run: cd $GITHUB_WORKSPACE

    - name: Compile Java code and create JAR
      run: |
         # Compile your Java code
         javac HelloWorld.java
         # Create a JAR file
         jar cfe HelloWorld.jar HelloWorld HelloWorld.class

    - name: Save JAR as Artifact
      uses: actions/upload-artifact@v2
      with:
        name: HelloWorld-JAR  # Name of the artifact
        path: HelloWorld.jar  # Path to the JAR file

    - name: Download JAR from SonarQube
      run: |
        # Replace with the actual URL of the JAR file provided by SonarQube
        curl -sSL -o sonarqube.jar "https://9c41-183-82-1-156.ngrok-free.app/dashboard?id=test"
      # Optionally, you can rename the downloaded JAR file if needed

  build:
    name: Build and Push Docker Image
    needs: sonarqube
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Update and Upgrade
        run: |
          sudo apt-get update
          sudo apt-get -y upgrade

      - name: Remove conflicting packages
        run: |
          sudo apt-get remove -y containerd.io

      - name: Install Docker
        run: |
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker

      - name: Verify AWS CLI
        run: aws --version

      - name: Check Docker Version
        run: docker --version

      - name: Download JAR Artifact
        uses: actions/download-artifact@v2
        with:
          name: HelloWorld-JAR
          path: .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        run: docker build -t my-java-app .

      - name: Authenticate to Amazon ECR
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 390067525135.dkr.ecr.ap-south-1.amazonaws.com/my-java-app

      - name: Push Docker image to ECR
        run: |
          docker tag my-java-app:latest 390067525135.dkr.ecr.ap-south-1.amazonaws.com/my-java-app:v1
          docker push 390067525135.dkr.ecr.ap-south-1.amazonaws.com/my-java-app:v1

      - name: Install Cosign
        run: |
         # Install Cosign
         curl -sL https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 -o cosign
         chmod +x cosign
         sudo mv cosign /usr/local/bin/
         
      - name: Sign Docker image with Cosign
        run: |
         docker pull 390067525135.dkr.ecr.ap-south-1.amazonaws.com/my-java-app:v1
         echo "$COSIGN_KEY" > cosign.key
         cosign sign --key cosign.key 390067525135.dkr.ecr.ap-south-1.amazonaws.com/my-java-app:v1
        env:
         COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
         COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

      - name: Upload JAR to Artifactory
        run: |
          ARTIFACTORY_USERNAME="${{ secrets.ARTIFACTORY_USERNAME }}"
          ARTIFACTORY_PASSWORD="${{ secrets.ARTIFACTORY_PASSWORD }}"
          ARTIFACTORY_URL="https://hyndavi.jfrog.io/artifactory/my-java-repo/"
    
           # Use HTTP Basic Authentication with username and password
          curl -u "${ARTIFACTORY_USERNAME}:${ARTIFACTORY_PASSWORD}" \
           -T HelloWorld.jar "${ARTIFACTORY_URL}/HelloWorld.jar"
